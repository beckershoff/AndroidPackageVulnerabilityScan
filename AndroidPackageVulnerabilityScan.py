import subprocess
import requests
import time
import sys
import math
import tkinter as tk
from tkinter import ttk

API_RATE_LIMIT = 6  # Time in seconds to wait between requests

def get_installed_apps():
    try:
        adb_output = subprocess.check_output(['adb', 'shell', 'pm', 'list', 'packages'], universal_newlines=True)
        app_list = adb_output.strip().split('\n')
        return [app.split(':')[1] for app in app_list]
    except (subprocess.CalledProcessError, FileNotFoundError) as e:
        raise RuntimeError('Error retrieving installed apps:', str(e))

def check_vulnerabilities(apps, api_key, progress_bar, status_label, time_label, root):
    base_url = 'https://services.nvd.nist.gov/rest/json/cves/1.0'
    headers = {'User-Agent': 'Mozilla/5.0', 'api_key': api_key}
    total_apps = len(apps)
    processed_apps = 0
    start_time = time.time()

    for app in apps:
        query = f'cpe:/a:{app}'
        url = f'{base_url}?cpeMatchString={query}&addOns={app}'
        try:
            response = requests.get(url, headers=headers)
            if response.status_code == 429:
                status_label.config(text='Rate limit exceeded. Waiting for 30 seconds...')
                root.update()
                time.sleep(30)
                response = requests.get(url, headers=headers)

            response.raise_for_status()
            data = response.json()
        except requests.exceptions.RequestException as e:
            status_label.config(text=f'Error checking vulnerabilities for {app}: {str(e)}')
            root.update()
            continue
        except ValueError as e:
            status_label.config(text=f'Error parsing JSON response for {app}: {str(e)}')
            root.update()
            continue

        if 'result' not in data:
            status_label.config(text=f'No vulnerabilities found for {app}')
        else:
            cve_entries = data['result'].get('CVE_Items', [])
            if cve_entries:
                status_label.config(text=f'Vulnerabilities found for {app}:')
                for entry in cve_entries:
                    cve_id = entry.get('cve', {}).get('CVE_data_meta', {}).get('ID')
                    status_label.config(text=f'- {cve_id}')
                    root.update()
            else:
                status_label.config(text=f'No vulnerabilities found for {app}')

        processed_apps += 1
        progress = processed_apps / total_apps * 100
        elapsed_time = time.time() - start_time
        eta_seconds = (elapsed_time / processed_apps) * (total_apps - processed_apps)
        eta_formatted = time.strftime('%H:%M:%S', time.gmtime(eta_seconds))

        progress_bar['value'] = progress
        time_label.config(text=f'Elapsed Time: {format_time(elapsed_time)}')
        status_label.config(text=f'Progress: {progress:.2f}%, ETA: {eta_formatted}')
        root.update()

        if processed_apps < total_apps:
            time.sleep(API_RATE_LIMIT)

def format_time(seconds):
    m, s = divmod(seconds, 60)
    h, m = divmod(m, 60)
    return f'{int(h):02d}:{int(m):02d}:{int(s):02d}'

def main(api_key):
    try:
        apps = get_installed_apps()
        if not apps:
            print('No installed apps found.')
            return

        root = tk.Tk()
        root.title('Vulnerability Checker')
        root.geometry('400x150')

        progress_bar = ttk.Progressbar(root, orient='horizontal', length=300, mode='determinate')
        progress_bar.pack(pady=20)

        status_label = tk.Label(root, text='Checking vulnerabilities...', font=('Arial', 12))
        status_label.pack()

        time_label = tk.Label(root, text='Elapsed Time: 00:00:00', font=('Arial', 10))
        time_label.pack()

        root.update()

        check_vulnerabilities(apps, api_key, progress_bar, status_label, time_label, root)

        root.mainloop()

    except RuntimeError as e:
        print('Error:', str(e))

if __name__ == '__main__':
    api_key = ''  # Replace with your NIST NVD API key
    main(api_key)
