import subprocess
import requests
import time
import sys

API_RATE_LIMIT = 6  # Time in seconds to wait between requests

def get_installed_apps():
    try:
        adb_output = subprocess.check_output(['adb', 'shell', 'pm', 'list', 'packages'], universal_newlines=True)
        app_list = adb_output.strip().split('\n')
        return [app.split(':')[1] for app in app_list]
    except (subprocess.CalledProcessError, FileNotFoundError) as e:
        raise RuntimeError('Error retrieving installed apps:', str(e))

def check_vulnerabilities(apps, api_key):
    base_url = 'https://services.nvd.nist.gov/rest/json/cves/1.0'
    headers = {'User-Agent': 'Mozilla/5.0', 'api_key': api_key}
    total_apps = len(apps)
    processed_apps = 0
    start_time = time.time()

    print('Checking vulnerabilities...\n')
    for app in apps:
        query = f'cpe:/a:{app}'
        url = f'{base_url}?cpeMatchString={query}&addOns={app}'
        try:
            response = requests.get(url, headers=headers)
            if response.status_code == 429:
                print('Rate limit exceeded. Waiting for 30 seconds...')
                time.sleep(30)
                response = requests.get(url, headers=headers)

            response.raise_for_status()
            data = response.json()
        except requests.exceptions.RequestException as e:
            print(f'Error checking vulnerabilities for {app}: {str(e)}')
            continue
        except ValueError as e:
            print(f'Error parsing JSON response for {app}: {str(e)}')
            continue

        if 'result' not in data:
            print(f'No vulnerabilities found for {app}')
        else:
            cve_entries = data['result'].get('CVE_Items', [])
            if cve_entries:
                print(f'Vulnerabilities found for {app}:')
                for entry in cve_entries:
                    cve_id = entry.get('cve', {}).get('CVE_data_meta', {}).get('ID')
                    print(f'- {cve_id}')
            else:
                print(f'No vulnerabilities found for {app}')

        processed_apps += 1
        progress = processed_apps / total_apps * 100
        elapsed_time = time.time() - start_time
        eta = (elapsed_time / processed_apps) * (total_apps - processed_apps)

        print(f'\nProgress: {progress:.2f}%')
        print(f'Elapsed Time: {elapsed_time:.2f} seconds')
        print(f'Estimated Time Remaining: {eta:.2f} seconds')

        if processed_apps < total_apps:
            print(f'\nWaiting for {API_RATE_LIMIT} seconds...')
            time.sleep(API_RATE_LIMIT)

def main(api_key):
    try:
        apps = get_installed_apps()
        print(f'Found {len(apps)} installed apps.\n')
        if not apps:
            print('No installed apps found.')
            return

        check_vulnerabilities(apps, api_key)
    except RuntimeError as e:
        print('Error:', str(e))

if __name__ == '__main__':
    api_key = 'your-api-key-here'  # Replace with your NIST NVD API key
    main(api_key)
